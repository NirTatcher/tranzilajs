name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      publish_to_npm:
        description: 'Publish to npm?'
        required: false
        default: true
        type: boolean
      npm_tag:
        description: 'npm tag (latest, beta, alpha)'
        required: false
        default: 'latest'
      create_github_release:
        description: 'Create GitHub release?'
        required: false
        default: true
        type: boolean
      create_git_tag:
        description: 'Create Git tag?'
        required: false
        default: true
        type: boolean

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup npm authentication
        if: ${{ github.event.inputs.publish_to_npm == 'true' }}
        run: |
          echo "🔐 Setting up npm authentication..."
          echo "registry=https://registry.npmjs.org" > ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          echo "✅ npm authentication and registry configured"
          
      - name: Clear npm cache and prepare for publishing
        if: ${{ github.event.inputs.publish_to_npm == 'true' }}
        run: |
          echo "🧹 Clearing npm cache and preparing for publishing..."
          npm cache clean --force
          echo "✅ npm cache cleared"
          
          # Verify we can access the registry
          echo "🔍 Testing npm registry access..."
          npm config get registry
          echo "✅ Registry access verified"
        
      - name: Validate code quality
        run: |
          echo "🔍 Running validation..."
          npm run type-check
          npm test
          echo "✅ Validation passed"
          
      - name: Update version
        id: version_update
        run: |
          echo "📝 Updating version to ${{ github.event.inputs.version }}"
          
          # Store original version for potential rollback
          ORIGINAL_VERSION=$(node -p "require('./package.json').version")
          echo "original_version=$ORIGINAL_VERSION" >> $GITHUB_OUTPUT
          
          # Ensure version is not 0.0.0 (npm doesn't allow this)
          if [ "${{ github.event.inputs.version }}" = "0.0.0" ]; then
            echo "⚠️ Version 0.0.0 detected, updating to 1.0.0 for first release..."
            npm version 1.0.0 --no-git-tag-version
            echo "new_version=1.0.0" >> $GITHUB_OUTPUT
          else
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
            echo "new_version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Version updated from $ORIGINAL_VERSION to $(node -p "require('./package.json').version")"
          
      - name: Build package
        run: |
          npm run build
          echo "✅ Build completed"
          
      - name: Validate package.json
        id: validate
        run: |
          echo "🔍 Validating package.json..."
          
          # Check if version is valid for npm publishing
          VERSION=$(node -p "require('./package.json').version")
          echo "📦 Package version: $VERSION"
          
          # Verify the package name
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "📦 Package name: $PACKAGE_NAME"
          
          # Capture final version for use in other steps
          FINAL_VERSION=$(node -p "require('./package.json').version")
          echo "final_version=$FINAL_VERSION" >> $GITHUB_OUTPUT
          
          echo "✅ Package validation passed"
          
      - name: Prepare for publishing
        run: |
          echo "🔧 Preparing for npm publishing..."
          
          # Temporarily disable prepack script to prevent duplicate builds
          echo "📝 Temporarily disabling prepack script..."
          npm pkg delete scripts.prepack
          echo "✅ Prepack script disabled"
          
      - name: Test npm publish (dry-run)
        if: ${{ github.event.inputs.publish_to_npm == 'true' }}
        run: |
          echo "🧪 Testing npm publish with dry-run..."
          
          # Verify npm configuration
          echo "🔍 Verifying npm configuration..."
          npm config get registry
          npm whoami
          node -p "require('./package.json').name"
          node -p "require('./package.json').version"
          
          echo "📦 Package details:"
          npm pack --dry-run
          echo "🚀 Testing publish command..."
          npm publish --dry-run --access public
          echo "✅ Dry-run test passed - npm publish should work!"
          
      - name: Test npm configuration only
        if: ${{ github.event.inputs.publish_to_npm == 'false' }}
        run: |
          echo "🧪 Testing npm configuration only (npm publishing disabled)..."
          
          # Verify npm configuration
          echo "🔍 Verifying npm configuration..."
          npm config get registry
          npm whoami
          node -p "require('./package.json').name"
          node -p "require('./package.json').version"
          
          echo "📦 Package details:"
          npm pack --dry-run
          echo "✅ npm configuration test passed - package is ready for publishing when enabled!"
          
      - name: Create Git tag
        if: ${{ github.event.inputs.create_git_tag == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.validate.outputs.final_version }}"
          
          # Check if tag already exists and remove it if it does
          TAG_NAME="v${{ steps.validate.outputs.final_version }}"
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "⚠️ Tag $TAG_NAME already exists, removing it..."
            git tag -d "$TAG_NAME"
            git push origin ":refs/tags/$TAG_NAME" || echo "Tag removal from remote failed (this is okay)"
          fi
          
          # Create the new tag
          git tag "$TAG_NAME"
          echo "✅ Git tag created for version ${{ steps.validate.outputs.final_version }}"
          
      - name: Push changes
        run: |
          git push origin main
          if [ "${{ github.event.inputs.create_git_tag }}" = "true" ]; then
            git push origin v${{ steps.validate.outputs.final_version }}
            echo "✅ Tag pushed to GitHub"
          else
            echo "⏭️ Skipping tag push (create_git_tag is false)"
          fi
          echo "✅ Changes pushed to GitHub"
          

          
      - name: Get Commit List
        if: ${{ github.event.inputs.create_github_release == 'true' }}
        id: commits
        run: |
          echo "🔍 Generating commit list..."
          
          # Check if we have any tags
          if git tag --list | grep -q .; then
            # Get the last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              echo "📝 Found last tag: $LAST_TAG"
              COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %h %s (%an)" | head -20)
              if [ -z "$COMMITS" ]; then
                echo "⚠️ No commits since last tag, showing all commits"
                COMMITS=$(git log --pretty=format:"- %h %s (%an)" | head -20)
              fi
            else
              echo "📝 No tags found, showing all commits"
              COMMITS=$(git log --pretty=format:"- %h %s (%an)" | head -20)
            fi
          else
            echo "📝 No tags found, showing all commits"
            COMMITS=$(git log --pretty=format:"- %h %s (%an)" | head -20)
          fi
          
          echo "📋 Found commits:"
          echo "$COMMITS"
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_github_release == 'true' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.validate.outputs.final_version }}
          release_name: Release v${{ steps.validate.outputs.final_version }}
          body: |
            ## 🎉 Release v${{ steps.validate.outputs.final_version }}
            
            ### Commits in this release:
            
            ${{ steps.commits.outputs.commits }}
            
            ---
            
            ### Installation
            ```bash
            npm install tranzilajs@${{ steps.validate.outputs.final_version }}
            ```
            
            ### Documentation
            - [README](README.md) - Complete API reference and examples
            - [Usage Examples](usage-examples/) - Working code examples
            - [Contributing Guide](CONTRIBUTING.md) - How to contribute
            
            ---
            
            *This release was automatically generated by GitHub Actions*
          draft: false
          prerelease: false
          

          
      - name: Publish to npm
        if: ${{ github.event.inputs.publish_to_npm == 'true' }}
        run: |
          echo "📦 Publishing to npm..."
          echo "🚀 Publishing with --access public..."
          
          # Simple direct publish - no complex detection needed
          echo "🔍 Publishing package directly to npm..."
          npm publish --access public --tag ${{ github.event.inputs.npm_tag }}
          echo "✅ Published to npm successfully!"
          
      - name: Release Summary
        run: |
          echo "🎉 Release Summary"
          echo "=================="
          echo "Input Version: ${{ github.event.inputs.version }}"
          echo "Final Version: ${{ steps.validate.outputs.final_version }}"
          if [ "${{ github.event.inputs.create_git_tag }}" = "true" ]; then
            echo "Git Tag: v${{ steps.validate.outputs.final_version }}"
          else
            echo "Git Tag: Not created"
          fi
          echo "GitHub Release: ${{ github.event.inputs.create_github_release }}"
          echo "npm Publish: ${{ github.event.inputs.publish_to_npm }}"
          echo "npm Tag: ${{ github.event.inputs.npm_tag }}"
          echo ""
          echo "✅ Release workflow completed successfully!"
          
      - name: Rollback on failure
        if: failure()
        run: |
          echo "🚨 Pipeline failed! Rolling back ALL changes..."
          
          # Check if we have version info from the update step
          if [ -n "${{ steps.version_update.outputs.original_version }}" ]; then
            echo "🔄 Rolling back to version ${{ steps.version_update.outputs.original_version }}"
            
            # 1. ROLLBACK GIT TAG (if created)
            if [ "${{ github.event.inputs.create_git_tag }}" = "true" ]; then
              echo "🏷️ Rolling back Git tag..."
              TAG_NAME="v${{ steps.validate.outputs.final_version }}"
              if git tag -l | grep -q "^$TAG_NAME$"; then
                echo "🗑️ Removing Git tag $TAG_NAME"
                git tag -d "$TAG_NAME"
                git push origin ":refs/tags/$TAG_NAME" || echo "Tag removal from remote failed (this is okay)"
              fi
            fi
            
            # 2. ROLLBACK GITHUB RELEASE (if created)
            if [ "${{ github.event.inputs.create_github_release }}" = "true" ]; then
              echo "📦 Rolling back GitHub release..."
              RELEASE_TAG="v${{ steps.validate.outputs.final_version }}"
              
              # Try to delete the GitHub release using GitHub API
              echo "🗑️ Attempting to delete GitHub release for tag $RELEASE_TAG"
              curl -X DELETE \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/${{ github.repository }}/releases/tags/$RELEASE_TAG" \
                || echo "GitHub release deletion failed (may need manual cleanup)"
            fi
            
            # 3. ROLLBACK PACKAGE FILES (simple restoration)
            echo "📦 Rolling back package files..."
              # Reset to before our workflow started
                            echo "🔄 Simple package restoration approach..."
              
              # Restore package files to original version
              npm version ${{ steps.version_update.outputs.original_version }} --no-git-tag-version --allow-same-version
              
              if [ -f "package-lock.json" ]; then
                echo "🔄 Resetting package-lock.json"
                git checkout HEAD -- package-lock.json
              fi
              
              # Commit and push the restoration (simple approach)
              echo "🔄 Committing version restoration..."
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add package.json package-lock.json
              git commit -m "chore: restore version to ${{ steps.version_update.outputs.original_version }} after pipeline failure"
              git push origin main
              echo "✅ Version restoration committed and pushed"
            
            echo "✅ Complete rollback finished!"
            echo "✅ Version: ${{ steps.version_update.outputs.original_version }}"
            echo "✅ Git tag: Removed"
            echo "✅ GitHub release: Deleted via API"
            echo "✅ Package files: Restored"
            echo "✅ Version restoration: Committed and pushed"
          else
            echo "⚠️ Could not determine original version, manual rollback may be needed"
            echo "🔍 Manual cleanup required:"
            echo "   - Check git log for recent commits"
            echo "   - Remove any created tags"
            echo "   - Delete any GitHub releases"
          fi 